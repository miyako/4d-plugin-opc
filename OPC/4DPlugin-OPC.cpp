/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-OPC.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : OPC
 #	author : miyako
 #	2020/05/08
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-OPC.h"

static opcPart getPart(opcContainer *container, C_TEXT &path) {
    
    opcPart part = OPC_PART_INVALID;
    
    if(path.getUTF16Length()) {
        
        CUTF8String target;
        path.copyUTF8String(&target);
        part = opcPartFind(container, _X(target.c_str()), NULL, 0);
    }
    
    return part;
}

static const xmlChar *getRelationType(opcContainer *container, opcPart source, opcRelation rel) {

    const xmlChar *prefix = NULL;
    opc_uint32_t counter = -1;
    const xmlChar *type = NULL;
    
    opcRelationGetInformation(container, source, rel, &prefix, &counter, &type);
    
    return type;
}

static const xmlChar *getRelationPrefixSource(opcContainer *container, opcPart part, opcRelation rel, CUTF8String &prefix, CUTF8String &source) {
    
    const xmlChar *p = NULL;
    opc_uint32_t counter = -1;
    const xmlChar *type = NULL;
    
    opcRelationGetInformation(container, part, rel, &p, &counter, &type);
    
    prefix = CUTF8String((const uint8_t *)p);
    
    if (OPC_RELATION_INVALID != counter) {
        std::stringstream ss;
        ss << counter;
        prefix += (const uint8_t *)ss.str().c_str();
    }
    
    if(part)
        source = CUTF8String((const uint8_t *)part);

    return type;
}

static void traverseInternal(opcContainer *c,
                             opcPart source,
                             ARRAY_TEXT &paths,
                             ARRAY_TEXT &types) {
    
    for(opcRelation rel = opcRelationFirst(c, source);OPC_RELATION_INVALID != rel;rel=opcRelationNext(c, source, rel)) {
        
        opcPart part = opcRelationGetInternalTarget(c, source, rel);
        
        if (OPC_PART_INVALID != part) {
                        
            CUTF8String p = CUTF8String((const uint8_t *)part);
            CUTF8String t = CUTF8String((const uint8_t *)opcPartGetType(c, part));
            
            paths.appendUTF8String(&p);
            types.appendUTF8String(&t);
            
            traverseInternal(c, part, paths, types);
            
        }
    }
}

static void traverseExternal(opcContainer *c,
                             opcPart source,
                             ARRAY_TEXT &paths,
                             ARRAY_TEXT &types) {
    
    for(opcRelation rel = opcRelationFirst(c, source);OPC_RELATION_INVALID != rel;rel=opcRelationNext(c, source, rel)) {
        
        const xmlChar *target = opcRelationGetExternalTarget(c, source, rel);
        
        if (!target) {
            
            //is internal
            opcPart part = opcRelationGetInternalTarget(c, source, rel);
            
            if (OPC_PART_INVALID != part)
                traverseExternal(c, part, paths, types);
                
        }else{
            
            //is external
            CUTF8String p = CUTF8String((const uint8_t *)target);
            CUTF8String t = CUTF8String((const uint8_t *)getRelationType(c, source, rel));
            
            paths.appendUTF8String(&p);
            types.appendUTF8String(&t);
            
        }
    }
}

static void traverseRelation(opcContainer *c,
                             opcPart source,
                             ARRAY_TEXT &srcs,
                             ARRAY_TEXT &dsts,
                             ARRAY_TEXT &names,
                             ARRAY_TEXT &types) {
    
    for(opcRelation rel = opcRelationFirst(c, source);OPC_RELATION_INVALID != rel;rel=opcRelationNext(c, source, rel)) {
        
        const xmlChar *target = opcRelationGetExternalTarget(c, source, rel);
        
        if (!target) {
            
            //is internal
            opcPart part = opcRelationGetInternalTarget(c, source, rel);
            
            if (OPC_PART_INVALID != part) {

                CUTF8String n, s, t, p;
                
                t = CUTF8String((const uint8_t *)getRelationPrefixSource(c, source, rel, n, s));
                p = CUTF8String((const uint8_t *)part);
            
                srcs.appendUTF8String(&s);
                dsts.appendUTF8String(&p);
                names.appendUTF8String(&n);
                types.appendUTF8String(&t);
                    
            }
                
            traverseRelation(c, part, srcs, dsts, names, types);
            
        }else{
            
            //is external
            CUTF8String n, s, t, p;
                                    
            t = CUTF8String((const uint8_t *)getRelationPrefixSource(c, source, rel, n, s));
            p = CUTF8String((const uint8_t *)target);
            
            srcs.appendUTF8String(&s);
            dsts.appendUTF8String(&p);
            names.appendUTF8String(&n);
            types.appendUTF8String(&t);

        }
    }
}

#pragma mark -

void OnStartup()
{
    opcInitLibrary();
}

void OnExit()
{
    opcFreeLibrary();
}

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
            case kInitPlugin :
            case kServerInitPlugin :
                OnStartup();
                break;
                
            case kDeinitPlugin :
                OnExit();
                break;
                
			// --- OPC
            
			case 1 :
				OPC_Get_document_type(params);
				break;
			case 2 :
				OPC_RESOURCE_TYPE_LIST(params);
				break;
			case 3 :
				OPC_EXTERNAL_TARGET_LIST(params);
				break;
			case 4 :
				OPC_EXTENSION_LIST(params);
				break;
			case 5 :
				OPC_Register_resource_type(params);
				break;
			case 6 :
				OPC_RELATION_TYPE_LIST(params);
				break;
			case 7 :
				OPC_Get_resource(params);
				break;
			case 8 :
				OPC_RESOURCE_LIST(params);
				break;
			case 9 :
				OPC_Get_resource_size(params);
				break;
			case 10 :
				OPC_Delete_resource(params);
				break;
			case 11 :
				OPC_Set_resource(params);
				break;
			case 12 :
				OPC_EXTERNAL_RESOURCE_LIST(params);
				break;
			case 13 :
				OPC_Create_relation(params);
				break;
			case 14 :
				OPC_Remove_relation(params);
				break;
			case 15 :
				OPC_Create_external_relation(params);
				break;
			case 16 :
				OPC_RELATION_LIST(params);
				break;
			case 17 :
				OPC_Document_type(params);
				break;
			case 18 :
				OPC_Relation_type(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void OPC_Get_document_type(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        opcRelation rel = opcRelationFind(c, OPC_PART_INVALID, NULL, _X("http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument"));
        
        if (OPC_RELATION_INVALID != rel) {
            
            opcPart main = opcRelationGetInternalTarget(c, OPC_PART_INVALID, rel);
            
            if (OPC_PART_INVALID != main) {
                
                const xmlChar *type = opcPartGetType(c, main);
                
                CUTF8String t = CUTF8String((const uint8_t *)type);
                returnValue.setUTF8String(&t);
                
            }
            
        }
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    returnValue.setReturn(pResult);
}

void OPC_RESOURCE_TYPE_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    ARRAY_TEXT Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        Param2.setSize(1);

        for(const xmlChar *type = opcContentTypeFirst(c);
            NULL != type;
            type = opcContentTypeNext(c, type)) {
                CUTF8String t = CUTF8String((const uint8_t *)type);
                Param2.appendUTF8String(&t);
        }
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param2.toParamAtIndex(pParams, 2);
}

void OPC_EXTERNAL_TARGET_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    ARRAY_TEXT Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        Param2.setSize(1);
        
        for(const xmlChar *target = opcExternalTargetFirst(c);
            NULL != target;
            target = opcExternalTargetNext(c, target)) {
            CUTF8String t = CUTF8String((const uint8_t *)target);
            Param2.appendUTF8String(&t);
        }
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param2.toParamAtIndex(pParams, 2);
}

void OPC_EXTENSION_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    ARRAY_TEXT Param2;
    ARRAY_TEXT Param3;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        Param2.setSize(1);
        Param3.setSize(1);
        
        for(const xmlChar *ext = opcExtensionFirst(c);
            NULL != ext;
            ext = opcExtensionNext(c, ext)) {
                CUTF8String e = CUTF8String((const uint8_t *)ext);
                Param2.appendUTF8String(&e);
            
                const xmlChar *type = opcExtensionGetType(c, ext);
                CUTF8String t = CUTF8String((const uint8_t *)type);
                Param3.appendUTF8String(&t);
            
        }
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param2.toParamAtIndex(pParams, 2);
    Param3.toParamAtIndex(pParams, 3);
}

void OPC_Register_resource_type(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT Param3;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_WRITE, NULL, NULL);
    
    if(c) {
    
        CUTF8String ext, type;
        
        Param2.copyUTF8String(&ext);
        Param3.copyUTF8String(&type);
            
        CUTF8String r = CUTF8String((const uint8_t *)opcExtensionRegister(c, (const xmlChar *)ext.c_str(), (const xmlChar *)type.c_str()));
        returnValue.setUTF8String(&r);
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    returnValue.setReturn(pResult);
}

void OPC_RELATION_TYPE_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    ARRAY_TEXT Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        Param2.setSize(1);
        
        for(const xmlChar *type = opcRelationTypeFirst(c);
            NULL != type;
            type = opcRelationTypeNext(c, type)) {
            CUTF8String t = CUTF8String((const uint8_t *)type);
            Param2.appendUTF8String(&t);
        }
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param2.toParamAtIndex(pParams, 2);
}

void OPC_Get_resource(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_BLOB Param3;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    CUTF8String path, type;
    
    Param1.copyPath(&path);
    Param2.copyUTF8String(&type);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        opcPart part = getPart(c, Param2);
        
        if (OPC_PART_INVALID != part) {
            
            opcContainerInputStream *stream = opcContainerOpenInputStream(c, part);
            
            if (stream) {
                
                int ret = 0;
                opc_uint8_t buf[7096];
                
                while((ret = opcContainerReadInputStream(stream, buf, sizeof(buf))) > 0) {
                    Param3.addBytes((const uint8_t *)buf, ret);
                }
                
                opcContainerCloseInputStream(stream);
            }
            
        }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }else{returnValue.setIntValue(OPC_ERROR_INVALID_PATH);}
    
    Param3.toParamAtIndex(pParams, 3);
    returnValue.setReturn(pResult);
}

void OPC_RESOURCE_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    ARRAY_TEXT Param3;
    ARRAY_TEXT Param4;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if (c) {
        
        Param3.setSize(1);
        Param4.setSize(1);
        
        opcPart part = getPart(c, Param2);
        
        traverseInternal(c, part, Param3, Param4);
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param3.toParamAtIndex(pParams, 3);
    Param4.toParamAtIndex(pParams, 4);
}

void OPC_Get_resource_size(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    CUTF8String path, type;
    
    Param1.copyPath(&path);
    Param2.copyUTF8String(&type);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if(c) {
        
        opcPart part = getPart(c, Param2);
        
        if (OPC_PART_INVALID != part) {
            
            returnValue.setIntValue((int)opcPartGetSize(c, part));
            
        }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }else{returnValue.setIntValue(OPC_ERROR_INVALID_PATH);}
    
    returnValue.setReturn(pResult);
}

void OPC_Delete_resource(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    CUTF8String path, type;
    
    Param1.copyPath(&path);
    Param2.copyUTF8String(&type);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_WRITE, NULL, NULL);
    
    if(c) {
        
        opcPart part = getPart(c, Param2);
        
        if (OPC_PART_INVALID != part) {
            
            returnValue.setIntValue(opcPartDelete(c, part));
            opcContainerClose(c, OPC_CLOSE_TRIM);
            
        }else{
            
            returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);
            opcContainerClose(c, OPC_CLOSE_NOW);
            
        }
        
    }else{returnValue.setIntValue(-1);}
    
    returnValue.setReturn(pResult);
}

void OPC_Set_resource(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT Param3;
    C_BLOB Param4;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);

    CUTF8String path, name, type;
    
    Param1.copyPath(&path);
    Param2.copyUTF8String(&name);
    Param3.copyUTF8String(&type);
    
    if ((Param3.getUTF16Length())) {
    
        opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_WRITE, NULL, NULL);
        
        if(c) {
            
            opcPart part = opcPartCreate(c, _X(name.c_str()), _X(type.c_str()), 0);
            
            if (OPC_PART_INVALID != part) {
                
                opcContainerOutputStream *stream = opcContainerCreateOutputStream(c, part, OPC_COMPRESSIONOPTION_NONE);
                opcContainerWriteOutputStream(stream, Param4.getBytesPtr(), Param4.getBytesLength());
                opcContainerCloseOutputStream(stream);
                
            }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
            
            opcContainerClose(c, OPC_CLOSE_NOW);
            
        }else{returnValue.setIntValue(OPC_ERROR_INVALID_PATH);}
    
    }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
    
    returnValue.setReturn(pResult);
}

void OPC_EXTERNAL_RESOURCE_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    ARRAY_TEXT Param3;
    ARRAY_TEXT Param4;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if (c) {
            
        Param3.setSize(1);
        Param4.setSize(1);
        
        opcPart part = getPart(c, Param2);
        
        traverseExternal(c, part, Param3, Param4);
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param3.toParamAtIndex(pParams, 3);
    Param4.toParamAtIndex(pParams, 4);
}

void OPC_Create_relation(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT Param3;
    C_TEXT Param4;
    C_LONGINT Param5;
    C_TEXT Param6;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    Param5.fromParamAtIndex(pParams, 5);

    if(Param4.getUTF16Length()) {
        
        if(Param5.getIntValue() > 0) {
            
            CUTF8String path, src, dst, type, name;
            
            if(!Param6.getUTF16Length()) {
                name = DEFAULT_RELATION_PREFIX;
            }else{
                Param6.copyUTF8String(&name);
            }
                
            Param1.copyPath(&path);
            Param2.copyUTF8String(&src);
            Param3.copyUTF8String(&dst);
            Param4.copyUTF8String(&type);
            
            std::stringstream ss;
            ss << Param5.getIntValue();
            name +=    (const uint8_t *)ss.str().c_str();
        
            opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_WRITE, NULL, NULL);
            
            if(c) {
                
                opcPart srcPart = opcPartFind(c, _X(src.c_str()), NULL, 0);
                
                if (OPC_PART_INVALID != srcPart) {
                    
                    opcPart dstPart = opcPartFind(c, _X(dst.c_str()), NULL, 0);
                    
                    if (OPC_PART_INVALID != dstPart) {
                        
                        signed int status = (signed int)opcRelationAdd(c, srcPart, (const xmlChar *)name.c_str(), dstPart, (const xmlChar *)type.c_str());
        
                        if((status) == -1) {
                            returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_ID);
                        }else{
                            returnValue.setIntValue(status);
                        }
                        
                    }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
                    
                }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
                
                opcContainerClose(c, OPC_CLOSE_NOW);
                
            }else{returnValue.setIntValue(OPC_ERROR_INVALID_PATH);}
            
        }else{returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_ID);}
           
    }else{returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_TYPE);}
       
    returnValue.setReturn(pResult);
}

void OPC_Remove_relation(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_LONGINT Param3;
    C_TEXT Param4;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    
    if(Param3.getIntValue() > 0) {
        
        CUTF8String path, type, name;
        
        if(!Param4.getUTF16Length()) {
            name = DEFAULT_RELATION_PREFIX;
        }else{
            Param4.copyUTF8String(&name);
        }
        
        Param1.copyPath(&path);
        Param2.copyUTF8String(&type);
        
        std::stringstream ss;
        ss << Param3.getIntValue();
        name +=    (const uint8_t *)ss.str().c_str();
        
        opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_WRITE, NULL, NULL);
        
        if(c) {
            
            opcPart part = opcPartFind(c, _X(type.c_str()), NULL, 0);
            
            if (OPC_PART_INVALID != part) {
            
                if (OPC_RELATION_INVALID != opcRelationFind(c, part, (const xmlChar *)name.c_str(), NULL)) {
                    returnValue.setIntValue(opcRelationDelete(c, part, (const xmlChar *)name.c_str(), NULL));
                }else{
                    returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_ID);
                }
                
            }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
            
            opcContainerClose(c, OPC_CLOSE_TRIM);
            
        }else{returnValue.setIntValue(OPC_ERROR_INVALID_PATH);}
        
    }else{returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_ID);}
    
    returnValue.setReturn(pResult);

}

void OPC_Create_external_relation(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    C_TEXT Param3;
    C_TEXT Param4;
    C_LONGINT Param5;
    C_TEXT Param6;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    Param5.fromParamAtIndex(pParams, 5);
    
    if(Param4.getUTF16Length()) {
        
        if(Param5.getIntValue() > 0) {
            
            CUTF8String path, src, dst, type, name;
            
            if(!Param6.getUTF16Length()) {
                name = DEFAULT_RELATION_PREFIX;
            }else{
                Param6.copyUTF8String(&name);
            }
            
            Param1.copyPath(&path);
            Param2.copyUTF8String(&src);
            Param3.copyUTF8String(&dst);
            Param4.copyUTF8String(&type);
            
            std::stringstream ss;
            ss << Param5.getIntValue();
            name +=    (const uint8_t *)ss.str().c_str();
            
            opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_WRITE, NULL, NULL);
            
            if(c) {
                
                opcPart srcPart = opcPartFind(c, _X(src.c_str()), NULL, 0);
                
                if (OPC_PART_INVALID != srcPart) {
                
                    opcPart dstPart = opcPartFind(c, _X(dst.c_str()), NULL, 0);
                    
                    if (OPC_PART_INVALID != dstPart) {
                    
                        signed int status = (signed int)opcRelationAddExternal(c, srcPart, (const xmlChar *)name.c_str(), dstPart, (const xmlChar *)type.c_str());
                        
                        if((status) == -1) {
                            returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_ID);
                        }else{
                            returnValue.setIntValue(status);
                        }
                        
                    }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
                
                }else{returnValue.setIntValue(OPC_ERROR_INVALID_RESOURCE_ID);}
                
            }else{returnValue.setIntValue(OPC_ERROR_INVALID_PATH);}
            
        }else{returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_ID);}
    
    }else{returnValue.setIntValue(OPC_ERROR_INVALID_RELATION_TYPE);}
    
    returnValue.setReturn(pResult);

}

void OPC_RELATION_LIST(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;
    ARRAY_TEXT Param3;
    ARRAY_TEXT Param4;
    ARRAY_TEXT Param5;
    ARRAY_TEXT Param6;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    CUTF8String path;
    Param1.copyPath(&path);
    
    opcContainer *c = opcContainerOpen(_X(path.c_str()), OPC_OPEN_READ_ONLY, NULL, NULL);
    
    if (c) {
        
        Param3.setSize(1);
        Param4.setSize(1);
        Param5.setSize(1);
        Param6.setSize(1);
        
        opcPart part = getPart(c, Param2);
                
        traverseRelation(c, part, Param3, Param4, Param5, Param6);
        
        opcContainerClose(c, OPC_CLOSE_NOW);
        
    }
    
    Param3.toParamAtIndex(pParams, 3);
    Param4.toParamAtIndex(pParams, 4);
    Param5.toParamAtIndex(pParams, 5);
    Param6.toParamAtIndex(pParams, 6);
}

void OPC_Document_type(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    OPC_DOC_TYPE t = (OPC_DOC_TYPE)Param1.getIntValue();
    
    switch (t) {
        case OPC_DOCX:
            returnValue.setUTF8String(OPC_DOCX_TYPE, OPC_DOCX_TYPE_LEN);
            break;
            
        case OPC_XLSX:
            returnValue.setUTF8String(OPC_XLSX_TYPE, OPC_XLSX_TYPE_LEN);
            break;
            
        case OPC_PPTX:
            returnValue.setUTF8String(OPC_PPTX_TYPE, OPC_PPTX_TYPE_LEN);
            break;
            
        default:
            break;
    }
    
    returnValue.setReturn(pResult);
    
}

void OPC_Relation_type(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    OPC_RELATION_TYPE t = (OPC_RELATION_TYPE)Param1.getIntValue();
    
    switch (t) {
        case OPC_IMAGE:
            returnValue.setUTF8String(OPC_IMAGE_RELATION, OPC_IMAGE_RELATION_LEN);
            break;
            
        case OPC_STYLES:
            returnValue.setUTF8String(OPC_STYLES_RELATION, OPC_STYLES_RELATION_LEN);
            break;
            
        case OPC_STYLES_WITH_EFFECTS:
            returnValue.setUTF8String(OPC_STYLES_WITH_EFFECTS_RELATION, OPC_STYLES_WITH_EFFECTS_RELATION_LEN);
            break;
            
        case OPC_SETTINGS:
            returnValue.setUTF8String(OPC_SETTINGS_RELATION, OPC_SETTINGS_RELATION_LEN);
            break;

        case OPC_WEB_SETTINGS:
            returnValue.setUTF8String(OPC_WEB_SETTINGS_RELATION, OPC_WEB_SETTINGS_RELATION_LEN);
            break;
            
        case OPC_FONT_TABLE:
            returnValue.setUTF8String(OPC_FONT_TABLE_RELATION, OPC_FONT_TABLE_RELATION_LEN);
            break;
            
        case OPC_THEME:
            returnValue.setUTF8String(OPC_THEME_RELATION, OPC_THEME_RELATION_LEN);
            break;
            
        default:
            break;
    }
    
    
    returnValue.setReturn(pResult);
}

